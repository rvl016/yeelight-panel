// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.65.1.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty

import "bridge_definitions.dart";
import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';

import 'dart:ffi' as ffi;

class NativeImpl implements Native {
  final NativePlatform _platform;
  factory NativeImpl(ExternalLibrary dylib) =>
      NativeImpl.raw(NativePlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory NativeImpl.wasm(FutureOr<WasmModule> module) =>
      NativeImpl(module as ExternalLibrary);
  NativeImpl.raw(this._platform);
  Future<Platform> platform({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_platform(port_),
      parseSuccessData: _wire2api_platform,
      constMeta: kPlatformConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kPlatformConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "platform",
        argNames: [],
      );

  Future<bool> rustReleaseMode({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_rust_release_mode(port_),
      parseSuccessData: _wire2api_bool,
      constMeta: kRustReleaseModeConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRustReleaseModeConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "rust_release_mode",
        argNames: [],
      );

  Future<void> initApp({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_init_app(port_),
      parseSuccessData: _wire2api_unit,
      constMeta: kInitAppConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kInitAppConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "init_app",
        argNames: [],
      );

  Future<DeviceDetectResultInterface> detectNewDevice(
      {required String deviceName,
      required ConnectionConfigInterface connection,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(deviceName);
    var arg1 =
        _platform.api2wire_box_autoadd_connection_config_interface(connection);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_detect_new_device(port_, arg0, arg1),
      parseSuccessData: _wire2api_device_detect_result_interface,
      constMeta: kDetectNewDeviceConstMeta,
      argValues: [deviceName, connection],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDetectNewDeviceConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "detect_new_device",
        argNames: ["deviceName", "connection"],
      );

  Future<List<DeviceDataInterface>> getStoredDevices({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_get_stored_devices(port_),
      parseSuccessData: _wire2api_list_device_data_interface,
      constMeta: kGetStoredDevicesConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetStoredDevicesConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_stored_devices",
        argNames: [],
      );

  Future<void> removeDevice({required String deviceId, dynamic hint}) {
    var arg0 = _platform.api2wire_String(deviceId);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_remove_device(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kRemoveDeviceConstMeta,
      argValues: [deviceId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRemoveDeviceConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "remove_device",
        argNames: ["deviceId"],
      );

  Future<DeviceStateUpdateResult> setBrightness(
      {required String deviceId, required double brightness, dynamic hint}) {
    var arg0 = _platform.api2wire_String(deviceId);
    var arg1 = api2wire_f32(brightness);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_set_brightness(port_, arg0, arg1),
      parseSuccessData: _wire2api_device_state_update_result,
      constMeta: kSetBrightnessConstMeta,
      argValues: [deviceId, brightness],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSetBrightnessConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "set_brightness",
        argNames: ["deviceId", "brightness"],
      );

  Future<DeviceStateUpdateResult> setRgb(
      {required String deviceId, required RGBInterface rgb, dynamic hint}) {
    var arg0 = _platform.api2wire_String(deviceId);
    var arg1 = _platform.api2wire_box_autoadd_rgb_interface(rgb);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_set_rgb(port_, arg0, arg1),
      parseSuccessData: _wire2api_device_state_update_result,
      constMeta: kSetRgbConstMeta,
      argValues: [deviceId, rgb],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSetRgbConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "set_rgb",
        argNames: ["deviceId", "rgb"],
      );

  Future<DeviceStateUpdateResult> setHsv(
      {required String deviceId, required HSVInterface hsv, dynamic hint}) {
    var arg0 = _platform.api2wire_String(deviceId);
    var arg1 = _platform.api2wire_box_autoadd_hsv_interface(hsv);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_set_hsv(port_, arg0, arg1),
      parseSuccessData: _wire2api_device_state_update_result,
      constMeta: kSetHsvConstMeta,
      argValues: [deviceId, hsv],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSetHsvConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "set_hsv",
        argNames: ["deviceId", "hsv"],
      );

  Future<DeviceStateUpdateResult> setCt(
      {required String deviceId, required CTInterface ct, dynamic hint}) {
    var arg0 = _platform.api2wire_String(deviceId);
    var arg1 = _platform.api2wire_box_autoadd_ct_interface(ct);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_set_ct(port_, arg0, arg1),
      parseSuccessData: _wire2api_device_state_update_result,
      constMeta: kSetCtConstMeta,
      argValues: [deviceId, ct],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSetCtConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "set_ct",
        argNames: ["deviceId", "ct"],
      );

  Future<DeviceStateUpdateResult> setColorMode(
      {required String deviceId, required ColorMode colorMode, dynamic hint}) {
    var arg0 = _platform.api2wire_String(deviceId);
    var arg1 = api2wire_color_mode(colorMode);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_set_color_mode(port_, arg0, arg1),
      parseSuccessData: _wire2api_device_state_update_result,
      constMeta: kSetColorModeConstMeta,
      argValues: [deviceId, colorMode],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSetColorModeConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "set_color_mode",
        argNames: ["deviceId", "colorMode"],
      );

  Future<List<DeviceInterface>> getDevicesForUsing({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_get_devices_for_using(port_),
      parseSuccessData: _wire2api_list_device_interface,
      constMeta: kGetDevicesForUsingConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetDevicesForUsingConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_devices_for_using",
        argNames: [],
      );

  Future<DeviceStateInterface> getDeviceState(
      {required String deviceId, dynamic hint}) {
    var arg0 = _platform.api2wire_String(deviceId);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_get_device_state(port_, arg0),
      parseSuccessData: _wire2api_device_state_interface,
      constMeta: kGetDeviceStateConstMeta,
      argValues: [deviceId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetDeviceStateConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_device_state",
        argNames: ["deviceId"],
      );

  Future<DeviceStateInterface> syncDeviceState(
      {required String deviceId, dynamic hint}) {
    var arg0 = _platform.api2wire_String(deviceId);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_sync_device_state(port_, arg0),
      parseSuccessData: _wire2api_device_state_interface,
      constMeta: kSyncDeviceStateConstMeta,
      argValues: [deviceId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSyncDeviceStateConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "sync_device_state",
        argNames: ["deviceId"],
      );

  Future<List<ProfileInterface>> getProfiles({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_get_profiles(port_),
      parseSuccessData: _wire2api_list_profile_interface,
      constMeta: kGetProfilesConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetProfilesConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_profiles",
        argNames: [],
      );

  void dispose() {
    _platform.dispose();
  }
// Section: wire2api

  String _wire2api_String(dynamic raw) {
    return raw as String;
  }

  AnimationStateInteface _wire2api_animation_state_inteface(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 0)
      throw Exception('unexpected arr length: expect 0 but see ${arr.length}');
    return AnimationStateInteface();
  }

  bool _wire2api_bool(dynamic raw) {
    return raw as bool;
  }

  AnimationStateInteface _wire2api_box_animation_state_inteface(dynamic raw) {
    return _wire2api_animation_state_inteface(raw);
  }

  DeviceActionResultMetaInterface
      _wire2api_box_autoadd_device_action_result_meta_interface(dynamic raw) {
    return _wire2api_device_action_result_meta_interface(raw);
  }

  DeviceDataInterface _wire2api_box_autoadd_device_data_interface(dynamic raw) {
    return _wire2api_device_data_interface(raw);
  }

  DeviceStateInterface _wire2api_box_autoadd_device_state_interface(
      dynamic raw) {
    return _wire2api_device_state_interface(raw);
  }

  ProfileMultipleInterface _wire2api_box_autoadd_profile_multiple_interface(
      dynamic raw) {
    return _wire2api_profile_multiple_interface(raw);
  }

  ProfileSingleInterface _wire2api_box_autoadd_profile_single_interface(
      dynamic raw) {
    return _wire2api_profile_single_interface(raw);
  }

  ColorInterface _wire2api_box_color_interface(dynamic raw) {
    return _wire2api_color_interface(raw);
  }

  ColorStateInterface _wire2api_box_color_state_interface(dynamic raw) {
    return _wire2api_color_state_interface(raw);
  }

  ConnectionConfigInterface _wire2api_box_connection_config_interface(
      dynamic raw) {
    return _wire2api_connection_config_interface(raw);
  }

  CTInterface _wire2api_box_ct_interface(dynamic raw) {
    return _wire2api_ct_interface(raw);
  }

  DeviceDataInterface _wire2api_box_device_data_interface(dynamic raw) {
    return _wire2api_device_data_interface(raw);
  }

  DeviceImpl _wire2api_box_device_impl(dynamic raw) {
    return _wire2api_device_impl(raw);
  }

  DeviceInterface _wire2api_box_device_interface(dynamic raw) {
    return _wire2api_device_interface(raw);
  }

  DeviceResultCode _wire2api_box_device_result_code(dynamic raw) {
    return _wire2api_device_result_code(raw);
  }

  DeviceStateInterface _wire2api_box_device_state_interface(dynamic raw) {
    return _wire2api_device_state_interface(raw);
  }

  DeviceType _wire2api_box_device_type(dynamic raw) {
    return _wire2api_device_type(raw);
  }

  DirectModeStateInterface _wire2api_box_direct_mode_state_interface(
      dynamic raw) {
    return _wire2api_direct_mode_state_interface(raw);
  }

  HSVInterface _wire2api_box_hsv_interface(dynamic raw) {
    return _wire2api_hsv_interface(raw);
  }

  IPv4ConnectionInteface _wire2api_box_i_pv_4_connection_inteface(dynamic raw) {
    return _wire2api_i_pv_4_connection_inteface(raw);
  }

  RGBInterface _wire2api_box_rgb_interface(dynamic raw) {
    return _wire2api_rgb_interface(raw);
  }

  RunningStateInterface _wire2api_box_running_state_interface(dynamic raw) {
    return _wire2api_running_state_interface(raw);
  }

  ColorInterface _wire2api_color_interface(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return ColorInterface_None();
      case 1:
        return ColorInterface_HSV(
          _wire2api_box_hsv_interface(raw[1]),
        );
      case 2:
        return ColorInterface_RGB(
          _wire2api_box_rgb_interface(raw[1]),
        );
      case 3:
        return ColorInterface_CT(
          _wire2api_box_ct_interface(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  ColorStateInterface _wire2api_color_state_interface(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return ColorStateInterface(
      brightness: _wire2api_f32(arr[0]),
      color: _wire2api_box_color_interface(arr[1]),
    );
  }

  ConnectionConfigInterface _wire2api_connection_config_interface(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return ConnectionConfigInterface(
      ipV4: _wire2api_box_i_pv_4_connection_inteface(arr[0]),
    );
  }

  CTInterface _wire2api_ct_interface(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return CTInterface(
      temperature: _wire2api_u16(arr[0]),
    );
  }

  DeviceActionResultMetaInterface _wire2api_device_action_result_meta_interface(
      dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return DeviceActionResultMetaInterface(
      hadSuccess: _wire2api_bool(arr[0]),
      code: _wire2api_box_device_result_code(arr[1]),
      message: _wire2api_String(arr[2]),
    );
  }

  DeviceCommandCapability _wire2api_device_command_capability(dynamic raw) {
    return DeviceCommandCapability.values[raw];
  }

  DeviceDataInterface _wire2api_device_data_interface(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return DeviceDataInterface(
      id: _wire2api_String(arr[0]),
      name: _wire2api_String(arr[1]),
      deviceType: _wire2api_box_device_type(arr[2]),
      deviceImpl: _wire2api_box_device_impl(arr[3]),
      capabilities: _wire2api_list_wrapper(arr[4]),
    );
  }

  DeviceDetectErrorItemInterface _wire2api_device_detect_error_item_interface(
      dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return DeviceDetectErrorItemInterface(
      field0: _wire2api_box_device_impl(arr[0]),
      field1: _wire2api_String(arr[1]),
    );
  }

  DeviceDetectResultInterface _wire2api_device_detect_result_interface(
      dynamic raw) {
    switch (raw[0]) {
      case 0:
        return DeviceDetectResultInterface_Ok(
          _wire2api_box_autoadd_device_data_interface(raw[1]),
        );
      case 1:
        return DeviceDetectResultInterface_Error(
          _wire2api_list_device_detect_error_item_interface(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  DeviceImpl _wire2api_device_impl(dynamic raw) {
    return DeviceImpl.values[raw];
  }

  DeviceInterface _wire2api_device_interface(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return DeviceInterface(
      id: _wire2api_String(arr[0]),
      metadata: _wire2api_box_device_data_interface(arr[1]),
      state: _wire2api_opt_box_autoadd_device_state_interface(arr[2]),
    );
  }

  DeviceResultCode _wire2api_device_result_code(dynamic raw) {
    return DeviceResultCode.values[raw];
  }

  DeviceStateInterface _wire2api_device_state_interface(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return DeviceStateInterface(
      config: _wire2api_box_connection_config_interface(arr[0]),
      runningState: _wire2api_box_running_state_interface(arr[1]),
    );
  }

  DeviceStateUpdateResult _wire2api_device_state_update_result(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return DeviceStateUpdateResult_Ok(
          _wire2api_box_autoadd_device_state_interface(raw[1]),
        );
      case 1:
        return DeviceStateUpdateResult_Err(
          _wire2api_box_autoadd_device_action_result_meta_interface(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  DeviceType _wire2api_device_type(dynamic raw) {
    return DeviceType.values[raw];
  }

  DirectModeStateInterface _wire2api_direct_mode_state_interface(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return DirectModeStateInterface(
      connectionAddr: _wire2api_box_connection_config_interface(arr[0]),
    );
  }

  double _wire2api_f32(dynamic raw) {
    return raw as double;
  }

  HSVInterface _wire2api_hsv_interface(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return HSVInterface(
      hue: _wire2api_f32(arr[0]),
      saturation: _wire2api_f32(arr[1]),
    );
  }

  int _wire2api_i32(dynamic raw) {
    return raw as int;
  }

  IPv4ConnectionInteface _wire2api_i_pv_4_connection_inteface(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return IPv4ConnectionInteface(
      ip: _wire2api_u8_array_4(arr[0]),
      port: _wire2api_u16(arr[1]),
    );
  }

  List<DeviceDataInterface> _wire2api_list_device_data_interface(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_device_data_interface).toList();
  }

  List<DeviceDetectErrorItemInterface>
      _wire2api_list_device_detect_error_item_interface(dynamic raw) {
    return (raw as List<dynamic>)
        .map(_wire2api_device_detect_error_item_interface)
        .toList();
  }

  List<DeviceInterface> _wire2api_list_device_interface(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_device_interface).toList();
  }

  List<ProfileInterface> _wire2api_list_profile_interface(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_profile_interface).toList();
  }

  List<Wrapper> _wire2api_list_wrapper(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_wrapper).toList();
  }

  DeviceStateInterface? _wire2api_opt_box_autoadd_device_state_interface(
      dynamic raw) {
    return raw == null
        ? null
        : _wire2api_box_autoadd_device_state_interface(raw);
  }

  Platform _wire2api_platform(dynamic raw) {
    return Platform.values[raw];
  }

  ProfileDataInterface _wire2api_profile_data_interface(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return ProfileDataInterface_None();
      case 1:
        return ProfileDataInterface_Single(
          _wire2api_box_autoadd_profile_single_interface(raw[1]),
        );
      case 2:
        return ProfileDataInterface_Multiple(
          _wire2api_box_autoadd_profile_multiple_interface(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  ProfileInterface _wire2api_profile_interface(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return ProfileInterface(
      id: _wire2api_String(arr[0]),
      name: _wire2api_String(arr[1]),
      data: _wire2api_profile_data_interface(arr[2]),
    );
  }

  ProfileMultipleInterface _wire2api_profile_multiple_interface(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return ProfileMultipleInterface(
      devices: _wire2api_list_device_interface(arr[0]),
      state: _wire2api_box_device_state_interface(arr[1]),
    );
  }

  ProfileSingleInterface _wire2api_profile_single_interface(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return ProfileSingleInterface(
      device: _wire2api_box_device_interface(arr[0]),
      state: _wire2api_box_device_state_interface(arr[1]),
    );
  }

  RGBInterface _wire2api_rgb_interface(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return RGBInterface(
      rgb: _wire2api_u8_array_3(arr[0]),
    );
  }

  RunningStateInterface _wire2api_running_state_interface(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return RunningStateInterface_None();
      case 1:
        return RunningStateInterface_Color(
          _wire2api_box_color_state_interface(raw[1]),
        );
      case 2:
        return RunningStateInterface_Animation(
          _wire2api_box_animation_state_inteface(raw[1]),
        );
      case 3:
        return RunningStateInterface_DirectMode(
          _wire2api_box_direct_mode_state_interface(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  int _wire2api_u16(dynamic raw) {
    return raw as int;
  }

  int _wire2api_u8(dynamic raw) {
    return raw as int;
  }

  U8Array3 _wire2api_u8_array_3(dynamic raw) {
    return U8Array3(_wire2api_uint_8_list(raw));
  }

  U8Array4 _wire2api_u8_array_4(dynamic raw) {
    return U8Array4(_wire2api_uint_8_list(raw));
  }

  Uint8List _wire2api_uint_8_list(dynamic raw) {
    return raw as Uint8List;
  }

  void _wire2api_unit(dynamic raw) {
    return;
  }

  Wrapper _wire2api_wrapper(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return Wrapper(
      data: _wire2api_device_command_capability(arr[0]),
    );
  }
}

// Section: api2wire

@protected
int api2wire_color_mode(ColorMode raw) {
  return api2wire_i32(raw.index);
}

@protected
double api2wire_f32(double raw) {
  return raw;
}

@protected
int api2wire_i32(int raw) {
  return raw;
}

@protected
int api2wire_u16(int raw) {
  return raw;
}

@protected
int api2wire_u8(int raw) {
  return raw;
}

// Section: finalizer

class NativePlatform extends FlutterRustBridgeBase<NativeWire> {
  NativePlatform(ffi.DynamicLibrary dylib) : super(NativeWire(dylib));

// Section: api2wire

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_String(String raw) {
    return api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  @protected
  ffi.Pointer<wire_ConnectionConfigInterface>
      api2wire_box_autoadd_connection_config_interface(
          ConnectionConfigInterface raw) {
    final ptr = inner.new_box_autoadd_connection_config_interface_0();
    _api_fill_to_wire_connection_config_interface(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_CTInterface> api2wire_box_autoadd_ct_interface(
      CTInterface raw) {
    final ptr = inner.new_box_autoadd_ct_interface_0();
    _api_fill_to_wire_ct_interface(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_HSVInterface> api2wire_box_autoadd_hsv_interface(
      HSVInterface raw) {
    final ptr = inner.new_box_autoadd_hsv_interface_0();
    _api_fill_to_wire_hsv_interface(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_RGBInterface> api2wire_box_autoadd_rgb_interface(
      RGBInterface raw) {
    final ptr = inner.new_box_autoadd_rgb_interface_0();
    _api_fill_to_wire_rgb_interface(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_IPv4ConnectionInteface>
      api2wire_box_i_pv_4_connection_inteface(IPv4ConnectionInteface raw) {
    final ptr = inner.new_box_i_pv_4_connection_inteface_0();
    _api_fill_to_wire_i_pv_4_connection_inteface(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_u8_array_3(U8Array3 raw) {
    final ans = inner.new_uint_8_list_0(3);
    ans.ref.ptr.asTypedList(3).setAll(0, raw);
    return ans;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_u8_array_4(U8Array4 raw) {
    final ans = inner.new_uint_8_list_0(4);
    ans.ref.ptr.asTypedList(4).setAll(0, raw);
    return ans;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }
// Section: finalizer

// Section: api_fill_to_wire

  void _api_fill_to_wire_box_autoadd_connection_config_interface(
      ConnectionConfigInterface apiObj,
      ffi.Pointer<wire_ConnectionConfigInterface> wireObj) {
    _api_fill_to_wire_connection_config_interface(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_ct_interface(
      CTInterface apiObj, ffi.Pointer<wire_CTInterface> wireObj) {
    _api_fill_to_wire_ct_interface(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_hsv_interface(
      HSVInterface apiObj, ffi.Pointer<wire_HSVInterface> wireObj) {
    _api_fill_to_wire_hsv_interface(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_rgb_interface(
      RGBInterface apiObj, ffi.Pointer<wire_RGBInterface> wireObj) {
    _api_fill_to_wire_rgb_interface(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_i_pv_4_connection_inteface(
      IPv4ConnectionInteface apiObj,
      ffi.Pointer<wire_IPv4ConnectionInteface> wireObj) {
    _api_fill_to_wire_i_pv_4_connection_inteface(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_connection_config_interface(
      ConnectionConfigInterface apiObj,
      wire_ConnectionConfigInterface wireObj) {
    wireObj.ip_v4 = api2wire_box_i_pv_4_connection_inteface(apiObj.ipV4);
  }

  void _api_fill_to_wire_ct_interface(
      CTInterface apiObj, wire_CTInterface wireObj) {
    wireObj.temperature = api2wire_u16(apiObj.temperature);
  }

  void _api_fill_to_wire_hsv_interface(
      HSVInterface apiObj, wire_HSVInterface wireObj) {
    wireObj.hue = api2wire_f32(apiObj.hue);
    wireObj.saturation = api2wire_f32(apiObj.saturation);
  }

  void _api_fill_to_wire_i_pv_4_connection_inteface(
      IPv4ConnectionInteface apiObj, wire_IPv4ConnectionInteface wireObj) {
    wireObj.ip = api2wire_u8_array_4(apiObj.ip);
    wireObj.port = api2wire_u16(apiObj.port);
  }

  void _api_fill_to_wire_rgb_interface(
      RGBInterface apiObj, wire_RGBInterface wireObj) {
    wireObj.rgb = api2wire_u8_array_3(apiObj.rgb);
  }
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.

/// generated by flutter_rust_bridge
class NativeWire implements FlutterRustBridgeWireBase {
  @internal
  late final dartApi = DartApiDl(init_frb_dart_api_dl);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();

  Object get_dart_object(
    int ptr,
  ) {
    return _get_dart_object(
      ptr,
    );
  }

  late final _get_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.UintPtr)>>(
          'get_dart_object');
  late final _get_dart_object =
      _get_dart_objectPtr.asFunction<Object Function(int)>();

  void drop_dart_object(
    int ptr,
  ) {
    return _drop_dart_object(
      ptr,
    );
  }

  late final _drop_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UintPtr)>>(
          'drop_dart_object');
  late final _drop_dart_object =
      _drop_dart_objectPtr.asFunction<void Function(int)>();

  int new_dart_opaque(
    Object handle,
  ) {
    return _new_dart_opaque(
      handle,
    );
  }

  late final _new_dart_opaquePtr =
      _lookup<ffi.NativeFunction<ffi.UintPtr Function(ffi.Handle)>>(
          'new_dart_opaque');
  late final _new_dart_opaque =
      _new_dart_opaquePtr.asFunction<int Function(Object)>();

  int init_frb_dart_api_dl(
    ffi.Pointer<ffi.Void> obj,
  ) {
    return _init_frb_dart_api_dl(
      obj,
    );
  }

  late final _init_frb_dart_api_dlPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Void>)>>(
          'init_frb_dart_api_dl');
  late final _init_frb_dart_api_dl = _init_frb_dart_api_dlPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  void wire_platform(
    int port_,
  ) {
    return _wire_platform(
      port_,
    );
  }

  late final _wire_platformPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_platform');
  late final _wire_platform =
      _wire_platformPtr.asFunction<void Function(int)>();

  void wire_rust_release_mode(
    int port_,
  ) {
    return _wire_rust_release_mode(
      port_,
    );
  }

  late final _wire_rust_release_modePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_rust_release_mode');
  late final _wire_rust_release_mode =
      _wire_rust_release_modePtr.asFunction<void Function(int)>();

  void wire_init_app(
    int port_,
  ) {
    return _wire_init_app(
      port_,
    );
  }

  late final _wire_init_appPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_init_app');
  late final _wire_init_app =
      _wire_init_appPtr.asFunction<void Function(int)>();

  void wire_detect_new_device(
    int port_,
    ffi.Pointer<wire_uint_8_list> device_name,
    ffi.Pointer<wire_ConnectionConfigInterface> connection,
  ) {
    return _wire_detect_new_device(
      port_,
      device_name,
      connection,
    );
  }

  late final _wire_detect_new_devicePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_ConnectionConfigInterface>)>>(
      'wire_detect_new_device');
  late final _wire_detect_new_device = _wire_detect_new_devicePtr.asFunction<
      void Function(int, ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_ConnectionConfigInterface>)>();

  void wire_get_stored_devices(
    int port_,
  ) {
    return _wire_get_stored_devices(
      port_,
    );
  }

  late final _wire_get_stored_devicesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_get_stored_devices');
  late final _wire_get_stored_devices =
      _wire_get_stored_devicesPtr.asFunction<void Function(int)>();

  void wire_remove_device(
    int port_,
    ffi.Pointer<wire_uint_8_list> device_id,
  ) {
    return _wire_remove_device(
      port_,
      device_id,
    );
  }

  late final _wire_remove_devicePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_remove_device');
  late final _wire_remove_device = _wire_remove_devicePtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_set_brightness(
    int port_,
    ffi.Pointer<wire_uint_8_list> device_id,
    double brightness,
  ) {
    return _wire_set_brightness(
      port_,
      device_id,
      brightness,
    );
  }

  late final _wire_set_brightnessPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Float)>>('wire_set_brightness');
  late final _wire_set_brightness = _wire_set_brightnessPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>, double)>();

  void wire_set_rgb(
    int port_,
    ffi.Pointer<wire_uint_8_list> device_id,
    ffi.Pointer<wire_RGBInterface> rgb,
  ) {
    return _wire_set_rgb(
      port_,
      device_id,
      rgb,
    );
  }

  late final _wire_set_rgbPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_RGBInterface>)>>('wire_set_rgb');
  late final _wire_set_rgb = _wire_set_rgbPtr.asFunction<
      void Function(int, ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_RGBInterface>)>();

  void wire_set_hsv(
    int port_,
    ffi.Pointer<wire_uint_8_list> device_id,
    ffi.Pointer<wire_HSVInterface> hsv,
  ) {
    return _wire_set_hsv(
      port_,
      device_id,
      hsv,
    );
  }

  late final _wire_set_hsvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_HSVInterface>)>>('wire_set_hsv');
  late final _wire_set_hsv = _wire_set_hsvPtr.asFunction<
      void Function(int, ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_HSVInterface>)>();

  void wire_set_ct(
    int port_,
    ffi.Pointer<wire_uint_8_list> device_id,
    ffi.Pointer<wire_CTInterface> ct,
  ) {
    return _wire_set_ct(
      port_,
      device_id,
      ct,
    );
  }

  late final _wire_set_ctPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_CTInterface>)>>('wire_set_ct');
  late final _wire_set_ct = _wire_set_ctPtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_CTInterface>)>();

  void wire_set_color_mode(
    int port_,
    ffi.Pointer<wire_uint_8_list> device_id,
    int color_mode,
  ) {
    return _wire_set_color_mode(
      port_,
      device_id,
      color_mode,
    );
  }

  late final _wire_set_color_modePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Int32)>>('wire_set_color_mode');
  late final _wire_set_color_mode = _wire_set_color_modePtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>, int)>();

  void wire_get_devices_for_using(
    int port_,
  ) {
    return _wire_get_devices_for_using(
      port_,
    );
  }

  late final _wire_get_devices_for_usingPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_get_devices_for_using');
  late final _wire_get_devices_for_using =
      _wire_get_devices_for_usingPtr.asFunction<void Function(int)>();

  void wire_get_device_state(
    int port_,
    ffi.Pointer<wire_uint_8_list> device_id,
  ) {
    return _wire_get_device_state(
      port_,
      device_id,
    );
  }

  late final _wire_get_device_statePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_get_device_state');
  late final _wire_get_device_state = _wire_get_device_statePtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_sync_device_state(
    int port_,
    ffi.Pointer<wire_uint_8_list> device_id,
  ) {
    return _wire_sync_device_state(
      port_,
      device_id,
    );
  }

  late final _wire_sync_device_statePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_sync_device_state');
  late final _wire_sync_device_state = _wire_sync_device_statePtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_get_profiles(
    int port_,
  ) {
    return _wire_get_profiles(
      port_,
    );
  }

  late final _wire_get_profilesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_get_profiles');
  late final _wire_get_profiles =
      _wire_get_profilesPtr.asFunction<void Function(int)>();

  ffi.Pointer<wire_ConnectionConfigInterface>
      new_box_autoadd_connection_config_interface_0() {
    return _new_box_autoadd_connection_config_interface_0();
  }

  late final _new_box_autoadd_connection_config_interface_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_ConnectionConfigInterface>
              Function()>>('new_box_autoadd_connection_config_interface_0');
  late final _new_box_autoadd_connection_config_interface_0 =
      _new_box_autoadd_connection_config_interface_0Ptr
          .asFunction<ffi.Pointer<wire_ConnectionConfigInterface> Function()>();

  ffi.Pointer<wire_CTInterface> new_box_autoadd_ct_interface_0() {
    return _new_box_autoadd_ct_interface_0();
  }

  late final _new_box_autoadd_ct_interface_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_CTInterface> Function()>>(
          'new_box_autoadd_ct_interface_0');
  late final _new_box_autoadd_ct_interface_0 =
      _new_box_autoadd_ct_interface_0Ptr
          .asFunction<ffi.Pointer<wire_CTInterface> Function()>();

  ffi.Pointer<wire_HSVInterface> new_box_autoadd_hsv_interface_0() {
    return _new_box_autoadd_hsv_interface_0();
  }

  late final _new_box_autoadd_hsv_interface_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_HSVInterface> Function()>>(
          'new_box_autoadd_hsv_interface_0');
  late final _new_box_autoadd_hsv_interface_0 =
      _new_box_autoadd_hsv_interface_0Ptr
          .asFunction<ffi.Pointer<wire_HSVInterface> Function()>();

  ffi.Pointer<wire_RGBInterface> new_box_autoadd_rgb_interface_0() {
    return _new_box_autoadd_rgb_interface_0();
  }

  late final _new_box_autoadd_rgb_interface_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_RGBInterface> Function()>>(
          'new_box_autoadd_rgb_interface_0');
  late final _new_box_autoadd_rgb_interface_0 =
      _new_box_autoadd_rgb_interface_0Ptr
          .asFunction<ffi.Pointer<wire_RGBInterface> Function()>();

  ffi.Pointer<wire_IPv4ConnectionInteface>
      new_box_i_pv_4_connection_inteface_0() {
    return _new_box_i_pv_4_connection_inteface_0();
  }

  late final _new_box_i_pv_4_connection_inteface_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_IPv4ConnectionInteface>
              Function()>>('new_box_i_pv_4_connection_inteface_0');
  late final _new_box_i_pv_4_connection_inteface_0 =
      _new_box_i_pv_4_connection_inteface_0Ptr
          .asFunction<ffi.Pointer<wire_IPv4ConnectionInteface> Function()>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list_0(
    int len,
  ) {
    return _new_uint_8_list_0(
      len,
    );
  }

  late final _new_uint_8_list_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_uint_8_list> Function(
              ffi.Int32)>>('new_uint_8_list_0');
  late final _new_uint_8_list_0 = _new_uint_8_list_0Ptr
      .asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  void free_WireSyncReturn(
    WireSyncReturn ptr,
  ) {
    return _free_WireSyncReturn(
      ptr,
    );
  }

  late final _free_WireSyncReturnPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturn)>>(
          'free_WireSyncReturn');
  late final _free_WireSyncReturn =
      _free_WireSyncReturnPtr.asFunction<void Function(WireSyncReturn)>();
}

class _Dart_Handle extends ffi.Opaque {}

class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

class wire_IPv4ConnectionInteface extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> ip;

  @ffi.Uint16()
  external int port;
}

class wire_ConnectionConfigInterface extends ffi.Struct {
  external ffi.Pointer<wire_IPv4ConnectionInteface> ip_v4;
}

class wire_RGBInterface extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> rgb;
}

class wire_HSVInterface extends ffi.Struct {
  @ffi.Float()
  external double hue;

  @ffi.Float()
  external double saturation;
}

class wire_CTInterface extends ffi.Struct {
  @ffi.Uint16()
  external int temperature;
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<ffi.Bool Function(DartPort, ffi.Pointer<ffi.Void>)>>;
typedef DartPort = ffi.Int64;
